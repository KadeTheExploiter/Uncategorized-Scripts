-- minified, 42.39% compression
function LoadLibrary(a)local b={}local string=string;local math=math;local table=table;local error=error;local tonumber=tonumber;local tostring=tostring;local type=type;local setmetatable=setmetatable;local pairs=pairs;local ipairs=ipairs;local assert=assert;local c={buffer={}}function c:New()local d={}setmetatable(d,self)self.__index=self;d.buffer={}return d end;function c:Append(e)self.buffer[#self.buffer+1]=e end;function c:ToString()return table.concat(self.buffer)end;local f={backslashes={['\b']="\\b",['\t']="\\t",['\n']="\\n",['\f']="\\f",['\r']="\\r",['"']="\\\"",['\\']="\\\\",['/']="\\/"}}function f:New()local d={}d.writer=c:New()setmetatable(d,self)self.__index=self;return d end;function f:Append(e)self.writer:Append(e)end;function f:ToString()return self.writer:ToString()end;function f:Write(d)local b=type(d)if b=="nil"then self:WriteNil()elseif b=="boolean"then self:WriteString(d)elseif b=="number"then self:WriteString(d)elseif b=="string"then self:ParseString(d)elseif b=="table"then self:WriteTable(d)elseif b=="function"then self:WriteFunction(d)elseif b=="thread"then self:WriteError(d)elseif b=="userdata"then self:WriteError(d)end end;function f:WriteNil()self:Append("null")end;function f:WriteString(d)self:Append(tostring(d))end;function f:ParseString(e)self:Append('"')self:Append(string.gsub(e,"[%z%c\\\"/]",function(g)local h=self.backslashes[g]if h then return h end;return string.format("\\u%.4X",string.byte(g))end))self:Append('"')end;function f:IsArray(b)local i=0;local j=function(k)if type(k)=="number"and k>0 then if math.floor(k)==k then return true end end;return false end;for k,l in pairs(b)do if not j(k)then return false,'{','}'else i=math.max(i,k)end end;return true,'[',']',i end;function f:WriteTable(b)local m,n,o,g=self:IsArray(b)self:Append(n)if m then for p=1,g do self:Write(b[p])if p<g then self:Append(',')end end else local q=true;for k,l in pairs(b)do if not q then self:Append(',')end;q=false;self:ParseString(k)self:Append(':')self:Write(l)end end;self:Append(o)end;function f:WriteError(d)error(string.format("Encoding of %s unsupported",tostring(d)))end;function f:WriteFunction(d)if d==Null then self:WriteNil()else self:WriteError(d)end end;local r={s="",i=0}function r:New(e)local d={}setmetatable(d,self)self.__index=self;d.s=e or d.s;return d end;function r:Peek()local p=self.i+1;if p<=#self.s then return string.sub(self.s,p,p)end;return nil end;function r:Next()self.i=self.i+1;if self.i<=#self.s then return string.sub(self.s,self.i,self.i)end;return nil end;function r:All()return self.s end;local s={escapes={['t']='\t',['n']='\n',['f']='\f',['r']='\r',['b']='\b'}}function s:New(e)local d={}d.reader=r:New(e)setmetatable(d,self)self.__index=self;return d end;function s:Read()self:SkipWhiteSpace()local t=self:Peek()if t==nil then error(string.format("Nil string: '%s'",self:All()))elseif t=='{'then return self:ReadObject()elseif t=='['then return self:ReadArray()elseif t=='"'then return self:ReadString()elseif string.find(t,"[%+%-%d]")then return self:ReadNumber()elseif t=='t'then return self:ReadTrue()elseif t=='f'then return self:ReadFalse()elseif t=='n'then return self:ReadNull()elseif t=='/'then self:ReadComment()return self:Read()else return nil end end;function s:ReadTrue()self:TestReservedWord{'t','r','u','e'}return true end;function s:ReadFalse()self:TestReservedWord{'f','a','l','s','e'}return false end;function s:ReadNull()self:TestReservedWord{'n','u','l','l'}return nil end;function s:TestReservedWord(b)for p,l in ipairs(b)do if self:Next()~=l then error(string.format("Error reading '%s': %s",table.concat(b),self:All()))end end end;function s:ReadNumber()local u=self:Next()local t=self:Peek()while t~=nil and string.find(t,"[%+%-%d%.eE]")do u=u..self:Next()t=self:Peek()end;u=tonumber(u)if u==nil then error(string.format("Invalid number: '%s'",u))else return u end end;function s:ReadString()local u=""assert(self:Next()=='"')while self:Peek()~='"'do local v=self:Next()if v=='\\'then v=self:Next()if self.escapes[v]then v=self.escapes[v]end end;u=u..v end;assert(self:Next()=='"')local w=function(x)return string.char(tonumber(x,16))end;return string.gsub(u,"u%x%x(%x%x)",w)end;function s:ReadComment()assert(self:Next()=='/')local y=self:Next()if y=='/'then self:ReadSingleLineComment()elseif y=='*'then self:ReadBlockComment()else error(string.format("Invalid comment: %s",self:All()))end end;function s:ReadBlockComment()local z=false;while not z do local v=self:Next()if v=='*'and self:Peek()=='/'then z=true end;if not z and v=='/'and self:Peek()=="*"then error(string.format("Invalid comment: %s, '/*' illegal.",self:All()))end end;self:Next()end;function s:ReadSingleLineComment()local v=self:Next()while v~='\r'and v~='\n'do v=self:Next()end end;function s:ReadArray()local u={}assert(self:Next()=='[')local z=false;if self:Peek()==']'then z=true end;while not z do local A=self:Read()u[#u+1]=A;self:SkipWhiteSpace()if self:Peek()==']'then z=true end;if not z then local v=self:Next()if v~=','then error(string.format("Invalid array: '%s' due to: '%s'",self:All(),v))end end end;assert(']'==self:Next())return u end;function s:ReadObject()local u={}assert(self:Next()=='{')local z=false;if self:Peek()=='}'then z=true end;while not z do local B=self:Read()if type(B)~="string"then error(string.format("Invalid non-string object key: %s",B))end;self:SkipWhiteSpace()local v=self:Next()if v~=':'then error(string.format("Invalid object: '%s' due to: '%s'",self:All(),v))end;self:SkipWhiteSpace()local C=self:Read()u[B]=C;self:SkipWhiteSpace()if self:Peek()=='}'then z=true end;if not z then v=self:Next()if v~=','then error(string.format("Invalid array: '%s' near: '%s'",self:All(),v))end end end;assert(self:Next()=="}")return u end;function s:SkipWhiteSpace()local D=self:Peek()while D~=nil and string.find(D,"[%s/]")do if D=='/'then self:ReadComment()else self:Next()end;D=self:Peek()end end;function s:Peek()return self.reader:Peek()end;function s:Next()return self.reader:Next()end;function s:All()return self.reader:All()end;function Encode(d)local E=f:New()E:Write(d)return E:ToString()end;function Decode(e)local F=s:New(e)return F:Read()end;function Null()return Null end;b.DecodeJSON=function(G)pcall(function()warn("RbxUtility.DecodeJSON is deprecated, please use Game:GetService('HttpService'):JSONDecode() instead.")end)if type(G)=="string"then return Decode(G)end;print("RbxUtil.DecodeJSON expects string argument!")return nil end;b.EncodeJSON=function(H)pcall(function()warn("RbxUtility.EncodeJSON is deprecated, please use Game:GetService('HttpService'):JSONEncode() instead.")end)return Encode(H)end;b.MakeWedge=function(I,J,K,L)return game:GetService("Terrain"):AutoWedgeCell(I,J,K)end;b.SelectTerrainRegion=function(M,N,O,P)local Q=game:GetService("Workspace"):FindFirstChild("Terrain")if not Q then return end;assert(M)assert(N)if not type(M)=="Region3"then error("regionToSelect (first arg), should be of type Region3, but is type",type(M))end;if not type(N)=="BrickColor"then error("color (second arg), should be of type BrickColor, but is type",type(N))end;local R=Q.GetCell;local S=Q.WorldToCellPreferSolid;local T=Q.CellCenterToWorld;local U=Enum.CellMaterial.Empty;local V=Instance.new("Model")V.Name="SelectionContainer"V.Archivable=false;if P then V.Parent=P else V.Parent=game:GetService("Workspace")end;local W=nil;local X=nil;local Y=0;local Z=nil;local _={}local a0={}local a1=Instance.new("Part")a1.Name="SelectionPart"a1.Transparency=1;a1.Anchored=true;a1.Locked=true;a1.CanCollide=false;a1.Size=Vector3.new(4.2,4.2,4.2)local a2=Instance.new("SelectionBox")local function a3(a4)local a5=a4.CFrame.p-a4.Size/2+Vector3.new(2,2,2)local a6=S(Q,a5)local a7=a4.CFrame.p+a4.Size/2-Vector3.new(2,2,2)local a8=S(Q,a7)local a9=Vector3int16.new(a8.x,a8.y,a8.z)local aa=Vector3int16.new(a6.x,a6.y,a6.z)return Region3int16.new(aa,a9)end;function createAdornment(ab)local ac=nil;local ad=nil;if#a0>0 then ac=a0[1]["part"]ad=a0[1]["box"]table.remove(a0,1)ad.Visible=true else ac=a1:Clone()ac.Archivable=false;ad=a2:Clone()ad.Archivable=false;ad.Adornee=ac;ad.Parent=V;ad.Adornee=ac;ad.Parent=V end;if ab then ad.Color=ab end;return ac,ad end;function cleanUpAdornments()for ae,af in pairs(_)do if af.KeepAlive~=X then af.SelectionBox.Visible=false;table.insert(a0,{part=af.SelectionPart,box=af.SelectionBox})_[ae]=nil end end end;function incrementAliveCounter()Y=Y+1;if Y>1000000 then Y=0 end;return Y end;function adornFullCellsInRegion(ag,N)local ah=ag.CFrame.p-ag.Size/2+Vector3.new(2,2,2)local ai=ag.CFrame.p+ag.Size/2-Vector3.new(2,2,2)local aj=S(Q,ah)local ak=S(Q,ai)X=incrementAliveCounter()for J=aj.y,ak.y do for K=aj.z,ak.z do for I=aj.x,ak.x do local al=R(Q,I,J,K)if al~=U then local am=T(Q,I,J,K)local ae=Vector3int16.new(I,J,K)local an=false;for ao,af in pairs(_)do if ao==ae then af.KeepAlive=X;if N then af.SelectionBox.Color=N end;an=true;break end end;if not an then local a1,a2=createAdornment(N)a1.Size=Vector3.new(4,4,4)a1.CFrame=CFrame.new(am)local af={SelectionPart=a1,SelectionBox=a2,KeepAlive=X}_[ae]=af end end end end end;cleanUpAdornments()end;Z=M;if O then local a1,a2=createAdornment(N)a1.Size=M.Size;a1.CFrame=M.CFrame;_.SelectionPart=a1;_.SelectionBox=a2;W=function(ap,N)if ap and ap~=Z then Z=ap;a1.Size=ap.Size;a1.CFrame=ap.CFrame end;if N then a2.Color=N end end else adornFullCellsInRegion(M,N)W=function(ap,N)if ap and ap~=Z then Z=ap;adornFullCellsInRegion(ap,N)end end end;local aq=function()W=nil;if V then V:Destroy()end;_=nil end;return W,aq end;function b.CreateSignal()local ar={}local as=Instance.new('BindableEvent')local at={}function ar:connect(au)if self~=ar then error("connect must be called with `:`, not `.`",2)end;if type(au)~='function'then error("Argument #1 of connect must be a function, got a "..type(au),2)end;local av=as.Event:Connect(au)at[av]=true;local aw={}function aw:disconnect()av:Disconnect()at[av]=nil end;aw.Disconnect=aw.disconnect;return aw end;function ar:disconnect()if self~=ar then error("disconnect must be called with `:`, not `.`",2)end;for av,ax in pairs(at)do av:Disconnect()at[av]=nil end end;function ar:wait()if self~=ar then error("wait must be called with `:`, not `.`",2)end;return as.Event:Wait()end;function ar:fire(...)if self~=ar then error("fire must be called with `:`, not `.`",2)end;as:Fire(...)end;ar.Connect=ar.connect;ar.Disconnect=ar.disconnect;ar.Wait=ar.wait;ar.Fire=ar.fire;return ar end;local function ay(az)if type(az)~='string'then error("Argument of Create must be a string",2)end;return function(aA)aA=aA or{}local aB=Instance.new(az)local aC=nil;local aD=nil;for k,l in pairs(aA)do if type(k)=='string'then if k=='Parent'then aC=l else aB[k]=l end elseif type(k)=='number'then if type(l)~='userdata'then error("Bad entry in Create body: Numeric keys must be paired with children, got a: "..type(l),2)end;l.Parent=aB elseif type(k)=='table'and k.__eventname then if type(l)~='function'then error("Bad entry in Create body: Key `[Create.E\'"..k.__eventname.."\']` must have a function value\
                        got: "..tostring(l),2)end;aB[k.__eventname]:connect(l)elseif k==b.Create then if type(l)~='function'then error("Bad entry in Create body: Key `[Create]` should be paired with a constructor function, \
                        got: "..tostring(l),2)elseif aD then error("Bad entry in Create body: Only one constructor function is allowed",2)end;aD=l else error("Bad entry ("..tostring(k).." => "..tostring(l)..") in Create body",2)end end;if aD then aD(aB)end;if aC then aB.Parent=aC end;return aB end end;b.Create=setmetatable({},{__call=function(aE,...)return ay(...)end})b.Create.E=function(aF)return{__eventname=aF}end;b.Help=function(aG)if aG=="DecodeJSON"or aG==b.DecodeJSON then return"Function DecodeJSON. "end;if aG=="EncodeJSON"or aG==b.EncodeJSON then return"Function EncodeJSON. "end;if aG=="MakeWedge"or aG==b.MakeWedge then return"Function MakeWedge. "end;if aG=="SelectTerrainRegion"or aG==b.SelectTerrainRegion then return"Function SelectTerrainRegion. "end;if aG=="CreateSignal"or aG==b.CreateSignal then return"Function CreateSignal. "end;if aG=="Signal:connect"then return"Method Signal:connect. "end;if aG=="Signal:wait"then return"Method Signal:wait. "end;if aG=="Signal:fire"then return"Method Signal:fire. "end;if aG=="Signal:disconnect"then return"Method Signal:disconnect. "end;if aG=="Create"then return"Function Create. "end end;return b end
